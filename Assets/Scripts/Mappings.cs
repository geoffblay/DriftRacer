//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Mappings.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Mappings: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Mappings()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Mappings"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""af7eb9d9-1fdb-49d1-b037-b6012c41c753"",
            ""actions"": [
                {
                    ""name"": ""Haungs Mode"",
                    ""type"": ""Button"",
                    ""id"": ""32820cde-934a-4f78-b410-112a15675983"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""fded94e0-f86f-4bcc-9863-b516bc658fcf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Continue"",
                    ""type"": ""Button"",
                    ""id"": ""019a8d43-86e1-4602-a692-678a8f19e912"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""f7b3ef5f-c857-46f1-a6a2-5601d678240b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""62524662-7673-49c2-ae87-a40939308beb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Controller"",
                    ""type"": ""Button"",
                    ""id"": ""9d3d9854-0052-4c01-9226-78d3e500765f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Tutorial"",
                    ""type"": ""Button"",
                    ""id"": ""6232ee48-3e87-406f-b6d1-09a0f7e5e825"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""46d7d776-4dbf-4c4a-ad65-92a6884e7037"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Haungs Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2132ada0-1197-4639-b189-66cad5db7811"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7da220ac-7971-438a-8c44-0f0bfd4ccecc"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d3ef4a9-92f7-4a4c-bdd1-f8eeb3061b10"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3217488f-b75b-4958-9598-28eeaf2f85a9"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf8ac4e7-3501-492e-bba3-c7aaa97157c3"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Controller"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13f4d340-f676-428a-be5f-3a4bec7bd4de"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tutorial"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_HaungsMode = m_Main.FindAction("Haungs Mode", throwIfNotFound: true);
        m_Main_Pause = m_Main.FindAction("Pause", throwIfNotFound: true);
        m_Main_Continue = m_Main.FindAction("Continue", throwIfNotFound: true);
        m_Main_Restart = m_Main.FindAction("Restart", throwIfNotFound: true);
        m_Main_Quit = m_Main.FindAction("Quit", throwIfNotFound: true);
        m_Main_Controller = m_Main.FindAction("Controller", throwIfNotFound: true);
        m_Main_Tutorial = m_Main.FindAction("Tutorial", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private List<IMainActions> m_MainActionsCallbackInterfaces = new List<IMainActions>();
    private readonly InputAction m_Main_HaungsMode;
    private readonly InputAction m_Main_Pause;
    private readonly InputAction m_Main_Continue;
    private readonly InputAction m_Main_Restart;
    private readonly InputAction m_Main_Quit;
    private readonly InputAction m_Main_Controller;
    private readonly InputAction m_Main_Tutorial;
    public struct MainActions
    {
        private @Mappings m_Wrapper;
        public MainActions(@Mappings wrapper) { m_Wrapper = wrapper; }
        public InputAction @HaungsMode => m_Wrapper.m_Main_HaungsMode;
        public InputAction @Pause => m_Wrapper.m_Main_Pause;
        public InputAction @Continue => m_Wrapper.m_Main_Continue;
        public InputAction @Restart => m_Wrapper.m_Main_Restart;
        public InputAction @Quit => m_Wrapper.m_Main_Quit;
        public InputAction @Controller => m_Wrapper.m_Main_Controller;
        public InputAction @Tutorial => m_Wrapper.m_Main_Tutorial;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void AddCallbacks(IMainActions instance)
        {
            if (instance == null || m_Wrapper.m_MainActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainActionsCallbackInterfaces.Add(instance);
            @HaungsMode.started += instance.OnHaungsMode;
            @HaungsMode.performed += instance.OnHaungsMode;
            @HaungsMode.canceled += instance.OnHaungsMode;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Continue.started += instance.OnContinue;
            @Continue.performed += instance.OnContinue;
            @Continue.canceled += instance.OnContinue;
            @Restart.started += instance.OnRestart;
            @Restart.performed += instance.OnRestart;
            @Restart.canceled += instance.OnRestart;
            @Quit.started += instance.OnQuit;
            @Quit.performed += instance.OnQuit;
            @Quit.canceled += instance.OnQuit;
            @Controller.started += instance.OnController;
            @Controller.performed += instance.OnController;
            @Controller.canceled += instance.OnController;
            @Tutorial.started += instance.OnTutorial;
            @Tutorial.performed += instance.OnTutorial;
            @Tutorial.canceled += instance.OnTutorial;
        }

        private void UnregisterCallbacks(IMainActions instance)
        {
            @HaungsMode.started -= instance.OnHaungsMode;
            @HaungsMode.performed -= instance.OnHaungsMode;
            @HaungsMode.canceled -= instance.OnHaungsMode;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Continue.started -= instance.OnContinue;
            @Continue.performed -= instance.OnContinue;
            @Continue.canceled -= instance.OnContinue;
            @Restart.started -= instance.OnRestart;
            @Restart.performed -= instance.OnRestart;
            @Restart.canceled -= instance.OnRestart;
            @Quit.started -= instance.OnQuit;
            @Quit.performed -= instance.OnQuit;
            @Quit.canceled -= instance.OnQuit;
            @Controller.started -= instance.OnController;
            @Controller.performed -= instance.OnController;
            @Controller.canceled -= instance.OnController;
            @Tutorial.started -= instance.OnTutorial;
            @Tutorial.performed -= instance.OnTutorial;
            @Tutorial.canceled -= instance.OnTutorial;
        }

        public void RemoveCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainActions instance)
        {
            foreach (var item in m_Wrapper.m_MainActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainActions @Main => new MainActions(this);
    public interface IMainActions
    {
        void OnHaungsMode(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnContinue(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
        void OnQuit(InputAction.CallbackContext context);
        void OnController(InputAction.CallbackContext context);
        void OnTutorial(InputAction.CallbackContext context);
    }
}
